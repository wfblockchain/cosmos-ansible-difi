---

- name: get home directory of Ansible runner
  shell: "echo $HOME"
  register: ansible_runner_home

# Create validator
- name: create validator
  when: chain_create_validator and not chain_recover_validator
  shell: |
    cd $HOME
    {{chain_bin}} keys add validator --keyring-backend {{node_keyring}} --home {{chain_home}} --output json
    {{chain_bin}} add-genesis-account validator {{chain_validator_coins}}{{ chain_denom }} --home {{chain_home}} --keyring-backend="{{node_keyring}}"
  register: chain_create_validator_output
  become: yes

- name: save validator name, address, and mnemonic
  when: chain_create_validator and not chain_recover_validator
  copy:
    content="{{chain_create_validator_output.stderr}}"
    dest="{{chain_home}}/validator.json"
  become: yes

- name: gentx validator
  when: chain_create_validator and not chain_recover_validator
  shell: |
    cd $HOME
    if [ ! -f /home/difi/.difi/config/gentx/gentx-34a3faff6be68c37c2e723072962bab7e0e3917e.json ]; then
      {{chain_bin}} gentx validator {{chain_gentx_validator}}{{ chain_denom }} --keyring-backend="{{node_keyring}}" --home {{chain_home}} --moniker {{ validator_moniker }} --chain-id {{chain_id}}
    else
      echo "Genesis transaction file already exists. Skipping gentx."
    fi

  become: yes

- name: Confirm valid genesis
  when: chain_create_validator and not chain_recover_validator
  shell: |
    cd $HOME
    {{chain_bin}} validate-genesis --home {{chain_home}}

- name: create genesis accounts
  when: chain_airdrop
  shell: |
    cd $HOME
    {{chain_bin}} add-genesis-account {{ item }} {{chain_airdrop_coins}}{{ chain_denom }} --home {{chain_home}}
  become: yes
  loop: "{{ chain_airdrop_accounts }}"

- name: recover delegator account
  when: chain_recover_delegator
  shell: |
    cd $HOME
    echo {{ delegator_account_mnemonic }} | {{ chain_bin }} keys add {{ delegator_account_name }} --keyring-backend {{ node_keyring }} --home {{ chain_home }} --output json --recover
    {{ chain_bin }} add-genesis-account {{ delegator_account_name }} {{ delegator_account_coins }}{{ chain_denom }} --home {{ chain_home }} --keyring-backend {{ node_keyring }}
  register: chain_recover_delegator_output
  become: yes

- name: save delegator name and address
  when: chain_recover_delegator
  copy:
    content="{{ chain_recover_delegator_output.stderr }}"
    dest="{{chain_home}}/{{delegator_account_name}}.json"
  become_user: "{{ node_user }}"

- name: collect gentx
  when: chain_create_validator or chain_recover_validator
  shell: |
    cd $HOME
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    {{chain_bin}} collect-gentxs --home {{ chain_home }}
  become: yes

- name: patch genesis file with minimum deposit and short voting period
  when: chain_gov_testing
  shell: |
    cd {{chain_home}}/config
    jq '.app_state.gov.deposit_params.min_deposit[0].amount |= "1"' genesis.json > temp.json
    jq '.app_state.gov.voting_params.voting_period |= "{{ chain_voting_period }}"' temp.json > genesis.json
    rm temp.json

- name: patch genesis file with specified denom
  when: not (archive_url is defined)
  replace:
    path: '{{chain_home}}/config/genesis.json'
    regexp: '"stake"'
    replace: '"{{chain_denom}}"'

## Addressbook config
- name: copy addrbook.json
  when: addrbook_file is defined
  copy:
    src: '{{addrbook_file}}'
    dest: '{{chain_home}}/config/addrbook_file.json'
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: download addrbook.json from URL
  when: addrbook_url is defined
  get_url:
    url: "{{addrbook_url}}"
    dest: "{{chain_home}}/config/addrbook.json"
    owner: '{{node_user}}'
    group: '{{node_user}}'

## Dynamic P2P persistent peers
- name: collect node IDs
  when: dynamic_p2p_persistent_peers
  shell: |
    cd $HOME
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    {{chain_bin}} tendermint show-node-id --home {{ chain_home }}
  register: dynamic_p2p_id
  become: yes

- name: Get P2P port variable for hosts
  when: dynamic_p2p_persistent_peers
  set_fact:
    dynamic_p2p_port: "{{ p2p_port }}"

- name: collected Node IDs and P2P ports
  when: dynamic_p2p_persistent_peers
  debug:
    msg: 'Node ID for {{ inventory_hostname }} is {{ dynamic_p2p_id.stdout }} P2P port set to: {{ dynamic_p2p_port }}'
  become_user: "{{ node_user }}"

- name: clear p2p_persistent_peers
  when: dynamic_p2p_persistent_peers
  set_fact:
    p2p_persistent_peers: ""

- name: set dynamic p2p_persistent_peers
  when: dynamic_p2p_persistent_peers
  set_fact:
    p2p_persistent_peers: "{{ p2p_persistent_peers }}{{ hostvars[item]['dynamic_p2p_id']['stdout'] }}@{{ item }}:{{ hostvars[item]['dynamic_p2p_port'] }},"
  with_items: "{{ groups['node'] }}"

- name: remove ending , from p2p_persistent_peers
  when: dynamic_p2p_persistent_peers
  set_fact:
    p2p_persistent_peers: "{{ p2p_persistent_peers[:-1] }}"

- name: p2p_persistent_peers string
  when: dynamic_p2p_persistent_peers
  debug:
    msg: 'p2p_persistent_peers string: {{ p2p_persistent_peers }}'
  become_user: "{{ p2p_persistent_peers }}"

## Patching Config files
- name: generate config json for patching toml files
  template:
    src: ansible_vars.json.j2
    dest: '{{chain_home}}/config/ansible_vars.json'
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: patch .toml configs with ansible variables
  script: |
    copy_config_vars.py --chain_home=$(echo {{chain_home}}) \
      --config_file=$(echo {{chain_home}}/config/ansible_vars.json)
  become: yes

- name: delete generated config json
  file:
    state: absent
    path: '{{chain_home}}/config/ansible_vars.json'
    owner: '{{node_user}}'
    group: '{{node_user}}'
