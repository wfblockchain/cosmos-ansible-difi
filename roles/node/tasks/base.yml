---

- include_role:
    name: common

- name: Set up pip dependencies
  pip:
    state: latest
    name:
      - pyOpenSSL
      - toml
      - github3.py

- name: Ensure user exists for chain
  user:
    name: "{{node_user}}"
    append: true
    groups: adm
    shell: /bin/bash
    comment: User for chain and cosmovisor services

# Stop existing services
- name: Populate service facts
  service_facts:
  tags:
    - chain_stop
    - chain_restart

- name: Stop existing chain systemd service
  # Check for both `SERVICE_NAME` and `SERVICE_NAME.service`
  when: >
    not (use_cosmovisor | default(false) | bool) and (
    (node_service_name in ansible_facts.services) or
    ((node_service_name + '.service') in ansible_facts.services))
  systemd:
    state: stopped
    name: "{{node_service_name}}"
  tags:
    - chain_stop
    - chain_restart

- name: Stop existing cosmovisor systemd service
  when: >
    (use_cosmovisor | default(false) | bool) and (
    (cosmovisor_service_name in ansible_facts.services) or
    ((cosmovisor_service_name + '.service') in ansible_facts.services))
  systemd:
    state: stopped
    name: "{{cosmovisor_service_name}}"
  tags:
    - chain_stop
    - chain_restart

- name: Remove golang apt package
  ansible.builtin.apt:
    name: golang
    state: absent

- name: Remove system Go files
  file:
    state: absent
    path: "{{ item }}"
  loop:
    - /usr/bin/go
    - /usr/lib/go

- name: Check golang version
  shell: |
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    go version
  register: go_current_version
  ignore_errors: true

- name: Extract golang
  # TODO: Auto-detect go_arch
  when: not go_version in go_current_version.stdout
  unarchive:
    src: "https://golang.org/dl/go{{go_version}}.{{go_arch}}.tar.gz"
    dest: /usr/local
    remote_src: yes
  become: true

# TODO: Firewall
# - name: set up firewall (block by default?)

- name: Check chain version
  shell: "{{chain_bin}} version"
  become_user: "{{node_user}}"
  register: chain_current_version
  ignore_errors: true
  become: yes

## Create go bin directory
- name: Prepare go folder
  when: chain_binary_source == "release"
  file:
    path: '{{ node_user_home }}/go/bin'
    state: directory
    recurse: true
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: Download chain binary from release
  when: chain_binary_source == "release"
  get_url:
    url: "{{ chain_binary_release }}"
    dest: "{{chain_bin}}"
    mode: "0777"
    force: true
  become_user: "{{node_user}}"

- name: Remove existing chain repository
  file:
    path: "{{chain_repo_dir}}"
    state: absent

- name: Clone repository using HTTPS with credentials
  when: chain_binary_source == "build"
  git:
    repo: "{{chain_repository}}"
    dest: "{{chain_repo_dir}}"
    version: "main"
    accept_hostkey: yes
    force: yes
    recursive: yes
    clone: yes
    update: yes
  become: yes

# Need to check this out
- name: Fix cosmovisor current symlink from archive to user {{ node_user }}
  when: archive_url is defined
  file:
    state: link
    src: "{{chain_home}}/cosmovisor/genesis"
    dest: "{{chain_home}}/cosmovisor/current"
    owner: '{{node_user}}'
    group: '{{node_user}}'

# Clear chain_home if it exists
- name: Check if chain home folder exists
  stat:
    path: "{{chain_home}}"
  register: chain_home_exists

- name: Clear chain home
  when: chain_home_clear | default(false) | bool
  file:
    state: absent
    path: "{{chain_home}}"

- name: Give Permissions and Initialize chain and generate executable
  become: yes
  become_user: "{{ ansible_user }}"
  shell: |
    cd /home/difi/chains/difi
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    export GOBIN=/home/difi/go/bin
    sudo chown -R {{ ansible_user }}:{{ ansible_user }} /home/difi
    ignite chain init --home /home/difi/.difi

  args:
    executable: /bin/bash

# - name: Add chain bin from go/bin to .bashrc PATH
#   when: not (use_cosmovisor | default(false) | bool)
#   blockinfile:
#     dest: '{{ node_user_home }}/.bashrc'
#     block: |
#       export PATH="$PATH:{{ node_user_home }}/go/bin"
#     marker: '# {mark} ANSIBLE MANAGED BLOCK - CHAIN PATH'
#     insertbefore: EOF
#     create: yes

# - name: Check cosmovisor version
#   when: (use_cosmovisor | default(false) | bool)
#   shell: |
#     PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
#     cosmovisor --version
#   become_user: "{{node_user}}"
#   register: cosmovisor_current
#   ignore_errors: true

# - name: clone and install cosmovisor
#   when: (use_cosmovisor | default(false) | bool) and (not cosmovisor_version in cosmovisor_current.stdout)
#   shell: |
#     PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
#     go install {{cosmovisor_repository}}@{{cosmovisor_version}}
#   become: yes

## Configure cosmovisor
# - name: Prepare cosmovisor folder
#   when: (use_cosmovisor | default(false) | bool)
#   file:
#     path: '{{ cosmovisor_home }}/genesis/bin'
#     state: directory
#     owner: '{{node_user}}'
#     group: '{{node_user}}'

# - name: Copy chain bin for cosmovisor genesis
#   when: (use_cosmovisor | default(false) | bool)
#   copy:
#     # force: false
#     remote_src: true
#     src: '{{chain_bin}}'
#     dest: '{{ cosmovisor_home }}/genesis/bin/{{chain_binary_name}}'
#     owner: '{{node_user}}'
#     group: '{{node_user}}'
#     mode: '0755'

# - name: Add chain bin from cosmovisor to .bashrc PATH
#   when: (use_cosmovisor | default(false) | bool)
#   blockinfile:
#     dest: '{{ node_user_home }}/.bashrc'
#     block: |
#       export PATH="$PATH:{{ cosmovisor_home }}/current/bin"
#     marker: '# {mark} ANSIBLE MANAGED BLOCK - CHAIN PATH'
#     insertbefore: EOF
#     create: yes

