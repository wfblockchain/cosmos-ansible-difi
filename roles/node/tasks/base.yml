---
# Save JSON data from RPC API
- name: Get JSON from registry
  uri:
    url: "{{ chain_registry }}"
    method: GET
    return_content: yes
    status_code: 200
    body_format: json
    http_agent: "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0"
  when: chain_registry is defined
  register: chain_registry_json

- name: Set chain_id to {{ chain_registry_json.json.chain_id }}
  when: chain_registry is defined
  set_fact:
    chain_id: '{{ chain_registry_json.json.chain_id }}'

- name: Set chain_version to {{ chain_registry_json.json.codebase.recommended_version }}
  when: chain_registry is defined
  set_fact:
    chain_version: '{{ chain_registry_json.json.codebase.recommended_version }}'

- name: Set genesis_url to {{ chain_registry_json.json.codebase.genesis.genesis_url }}
  when: chain_registry is defined
  set_fact:
    genesis_url: '{{ chain_registry_json.json.codebase.genesis.genesis_url }}'

# Get chain_version number
- name: parse version
  set_fact:
    major_version: '{{ chain_version}}'
    minor_version: '{{ chain_version}}'
    patch_version: '{{ chain_version}}'
  when: major_version is undefined and patch_version is undefined
  tags:
    - chain_reset
    - chain_stop
    - chain_restart

- name: print versions
  debug:
    msg: 'Major: {{ major_version }} Minor: {{ minor_version }} Patch: {{ patch_version }}'
  tags:
    - chain_reset
    - chain_stop
    - chain_restart

- include_role:
    name: common

- name: Set value to enable chain prometheus
  set_fact:
    prometheus_enabled: true
  when: monitoring_prometheus | default(false) | bool

- name: Setup and enable swap
  include_role:
    name: mkswap
  when: enable_swap | default(false) | bool

- name: Set up pip dependencies
  pip:
    state: latest
    name:
      - pyOpenSSL
      - toml
      - github3.py

- name: Ensure user exists for chain
  user:
    name: "{{node_user}}"
    append: true
    groups: adm
    shell: /bin/bash
    comment: User for chain and cosmovisor services

# Stop existing services
- name: Populate service facts
  service_facts:
  tags:
    - chain_stop
    - chain_restart

- name: Stop existing chain systemd service
  # Check for both `SERVICE_NAME` and `SERVICE_NAME.service`
  when: >
    not (use_cosmovisor | default(false) | bool) and (
    (node_service_name in ansible_facts.services) or
    ((node_service_name + '.service') in ansible_facts.services))
  systemd:
    state: stopped
    name: "{{node_service_name}}"
  tags:
    - chain_stop
    - chain_restart

- name: Stop existing cosmovisor systemd service
  when: >
    (use_cosmovisor | default(false) | bool) and (
    (cosmovisor_service_name in ansible_facts.services) or
    ((cosmovisor_service_name + '.service') in ansible_facts.services))
  systemd:
    state: stopped
    name: "{{cosmovisor_service_name}}"
  tags:
    - chain_stop
    - chain_restart

- name: Remove golang apt package
  ansible.builtin.apt:
    name: golang
    state: absent

- name: Remove system Go files
  file:
    state: absent
    path: "{{ item }}"
  loop:
    - /usr/bin/go
    - /usr/lib/go

- name: Check golang version
  shell: |
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    go version
  register: go_current_version
  ignore_errors: true

- name: Extract golang
  # TODO: Auto-detect go_arch
  when: not go_version in go_current_version.stdout
  unarchive:
    src: "https://golang.org/dl/go{{go_version}}.{{go_arch}}.tar.gz"
    dest: /usr/local
    remote_src: yes
  become: true

# TODO: Firewall
# - name: set up firewall (block by default?)

- name: Check chain version
  shell: "{{chain_bin}} version"
  become_user: "{{node_user}}"
  register: chain_current_version
  ignore_errors: true

## Create go bin directory
- name: Prepare go folder
  when: chain_binary_source == "release"
  file:
    path: '{{ node_user_home }}/go/bin'
    state: directory
    recurse: true
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: Download chain binary from release
  when: chain_binary_source == "release"
  get_url:
    url: "{{ chain_binary_release }}"
    dest: "{{chain_bin}}"
    mode: "0777"
    force: true
  become_user: "{{node_user}}"

- name: Remove existing chain repository
  file:
    path: "{{chain_repo_dir}}"
    state: absent

# - name: Clone repository
#   tasks:
# - name: Include encrypted credentials
#   include_vars:
#     file: "/home/{{ansible_user}}/cosmos-ansible/examples/vars/vault.yml"

# - name: Clone repository with interactive prompts
#   # hosts: localhost
#   tasks:


# - name: Debug Information
#   debug:
#     var: ansible_user


# - name: Debug Information
#   debug:
#     var: ansible_git_user

# - name: Debug Information
#   debug:
#     var: ansible_git_password


- name: Clone repository using HTTPS with credentials
  when: chain_binary_source == "build"
  git:
    repo: "{{chain_repository}}"
    dest: "{{chain_repo_dir}}"
    version: "main"
    accept_hostkey: yes
    force: yes
    recursive: yes
    clone: yes
    update: yes
  become: yes

# - name: Clone chain repo
#   when: chain_binary_source == "build"
#   # shell: |
#   #   cd /home/{{ansible_user}}
#   #   mkdir difi
#   #   cd /home/{{ansible_user}}/difi
#   #   pwd
#   #   git clone git@github.com:wfblockchain/distributed_finance.git > /home/{{ansible_user}}/Desktop/logs/clone.log 2>&1
#   #   force: yes
#   git:
#     repo: "git@github.com:wfblockchain/distributed_finance.git"
#     dest: "/home/{{ansible_user}}/difi"
#     version: "{{chain_version}}"
#     force: yes
#   become: yes

# - name: Install chain
#   when: chain_binary_source == "build"
#   shell: |
#     PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
#     go build -v -o /root/go/bin/difid -mod readonly -tags app_v1 -gcflags "all=-N -l -buildvcs=false" ./cmd/difid
#     pwd
#     ignite chain serve > /home/{{ansible_user}}/Desktop/logs/chain.log 2>&1
#   args:
#     chdir: "/home/difi/chains/chains/difi"
#   become_user: "{{node_user}}"
#   register: install_output

# - name: Print install logs
#   command: cat /home/{{ansible_user}}/Desktop/logs/chain.log
#   when: install_output.rc == 0

- name: Install chain
  become: yes
  shell: |
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin

  args:
    chdir: "{{chain_repo_dir}}"
  become_user: "{{ node_user }}"


# Download and extract chain archive
- name: Remove {{chain_home}}
  when: archive_url is defined
  file:
    state: absent
    path: "{{chain_home}}"

- name: Create {{chain_home}}
  when: archive_url is defined
  file:
    state: directory
    path: "{{chain_home}}"
    mode: 0755
    recurse: yes
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: Download and extract chain archive
  when: archive_url is defined
  unarchive:
    remote_src: "yes"
    src: "{{archive_url}}"
    dest: "{{chain_home}}"
    extra_opts: [--strip-components=1]
  become_user: "{{node_user}}"

- name: Fix cosmovisor current symlink from archive to user {{ node_user }}
  when: archive_url is defined
  file:
    state: link
    src: "{{chain_home}}/cosmovisor/genesis"
    dest: "{{chain_home}}/cosmovisor/current"
    owner: '{{node_user}}'
    group: '{{node_user}}'

# Clear chain_home if it exists
- name: Check if chain home folder exists
  stat:
    path: "{{chain_home}}"
  register: chain_home_exists

- name: Clear chain home
  when: chain_home_clear | default(false) | bool
  file:
    state: absent
    path: "{{chain_home}}"

- name: delete multi-node directories
  when: chain_home_clear | default(false) | bool
  file:
    state: absent
    path: "{{ node_user_home }}/multinode"

- name: create multi-node validator directories
  when: start_multinode
  file:
    path: "{{ node_user_home }}/multinode/{{ inventory_hostname }}"
    recurse: yes
    owner: '{{node_user}}'
    group: '{{node_user}}'
  become_user: "{{node_user}}"
  delegate_to: "{{ genesis_node }}"

- name: initialize multi-node on main node
  when: start_multinode
  shell: |
    cd $HOME
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    {{chain_bin}} init {{ inventory_hostname }} --chain-id {{ chain_id }} --home {{ node_user_home }}/multinode/{{ inventory_hostname }}
  become_user: "{{node_user}}"
  delegate_to: "{{ genesis_node }}"

- name: Give Permissions and Initialize chain
  become: yes
  become_user: "{{ ansible_user }}"
  shell: |
    cd /home/difi/chains/difi
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    export GOBIN=/home/difi/go/bin
    sudo chown -R {{ ansible_user }}:{{ ansible_user }} /home/difi
    ignite chain init --home /home/difi/.difi

  args:
    executable: /bin/bash

# # Initialize chain home
# - name: initialize chain
#   when: (chain_home_clear | default(false) | bool) or not chain_home_exists.stat.exists
#   # TODO: should we overwrite?
#   shell: |
#     cd $HOME
#     chmod +x /home/difi/chains/difi
#     sudo chown -R {{ ansible_user }}:{{ ansible_user }} /home/difi
#     /home/difi/chains/difi ignite chain init --home {{chain_home}}
#   become: yes
#     # /home/{{ansible_user}}/go/bin/difid init {{ chain_moniker }} --home {{chain_home}} --chain-id {{chain_id}}

- name: Add chain bin from go/bin to .bashrc PATH
  when: not (use_cosmovisor | default(false) | bool)
  blockinfile:
    dest: '{{ node_user_home }}/.bashrc'
    block: |
      export PATH="$PATH:{{ node_user_home }}/go/bin"
    marker: '# {mark} ANSIBLE MANAGED BLOCK - CHAIN PATH'
    insertbefore: EOF
    create: yes

- name: Check cosmovisor version
  when: (use_cosmovisor | default(false) | bool)
  shell: |
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    cosmovisor --version
  become_user: "{{node_user}}"
  register: cosmovisor_current
  ignore_errors: true

- name: clone and install cosmovisor
  when: (use_cosmovisor | default(false) | bool) and (not cosmovisor_version in cosmovisor_current.stdout)
  shell: |
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    go install {{cosmovisor_repository}}@{{cosmovisor_version}}
  become: yes

## Configure cosmovisor
- name: Prepare cosmovisor folder
  when: (use_cosmovisor | default(false) | bool)
  file:
    path: '{{ cosmovisor_home }}/genesis/bin'
    state: directory
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: Copy chain bin for cosmovisor genesis
  when: (use_cosmovisor | default(false) | bool)
  copy:
    # force: false
    remote_src: true
    src: '{{chain_bin}}'
    dest: '{{ cosmovisor_home }}/genesis/bin/{{chain_binary_name}}'
    owner: '{{node_user}}'
    group: '{{node_user}}'
    mode: '0755'

- name: Add chain bin from cosmovisor to .bashrc PATH
  when: (use_cosmovisor | default(false) | bool)
  blockinfile:
    dest: '{{ node_user_home }}/.bashrc'
    block: |
      export PATH="$PATH:{{ cosmovisor_home }}/current/bin"
    marker: '# {mark} ANSIBLE MANAGED BLOCK - CHAIN PATH'
    insertbefore: EOF
    create: yes

# Build chain bin for upgrade
- name: Preparing for archive upgrade test, download chain binary from release
  when: chain_binary_source == "release" and (chain_archive_upgrade_testing | default(false) | bool)
  get_url:
    url: "{{ chain_upgrade_binary_release }}"
    dest: "{{chain_bin}}"
    mode: "0777"
    force: true
  become_user: "{{node_user}}"

- name: Preparing for archive upgrade test, clone chain repo
  when: chain_binary_source == "build" and (chain_archive_upgrade_testing | default(false) | bool)
  git:
    repo: "{{chain_repository}}"
    dest: "{{chain_repo_dir}}"
    version: "{{chain_upgrade_version}}"
    force: true
  become_user: "{{node_user}}"

- name: Preparing for archive upgrade test, install chain
  when: (chain_archive_upgrade_testing | default(false) | bool) and chain_binary_source == "build"
  shell: |
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    make install
  args:
    chdir: "{{chain_repo_dir}}"
  become_user: "{{node_user}}"

- name: Preparing for archive upgrade test, create cosmovisor upgrade directory {{ cosmovisor_home }}/upgrades/{{ chain_upgrade_name }}/bin
  when: (chain_archive_upgrade_testing | default(false) | bool) and (use_cosmovisor | default(false) | bool)
  file:
    state: directory
    path: "{{ cosmovisor_home }}/upgrades/{{ chain_upgrade_name }}/bin"
    mode: 0755
    recurse: yes
    owner: '{{node_user}}'
    group: '{{node_user}}'

- name: Preparing for archive upgrade test, copy chain bin to cosmovisor upgrade directory
  when: (use_cosmovisor | default(false) | bool) and (chain_archive_upgrade_testing | default(false) | bool)
  copy:
    # force: false
    remote_src: true
    src: '{{ chain_bin }}'
    dest: '{{ cosmovisor_home }}/upgrades/{{ chain_upgrade_name }}/bin/{{ chain_binary_name }}'
    owner: '{{node_user}}'
    group: '{{node_user}}'
    mode: '0755'
